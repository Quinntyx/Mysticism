plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '9.1.0'
    id 'java'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "mysticism" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
    exclusiveContent {
        forRepository { maven { url = "https://api.modrinth.com/maven" } }
        filter { includeGroup "maven.modrinth" }
    }
}

configurations.all {
    resolutionStrategy {
        force "ai.djl.pytorch:pytorch-native-cpu:1.13.1:osx-x86_64"
//        force 'ai.djl.huggingface:tokenizers:0.28.0:osx-x86_64'
    }
}

dependencies {
    // Minecraft/Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // ---------- DJL: pin all modules to the same version via BOM ----------
    implementation platform("ai.djl:bom:${project.djl_version}")

    // Core API + Zoo (DefaultZooProvider lives here)
    implementation 'ai.djl:api'
    implementation 'ai.djl:model-zoo'

    // Pytorch Engine
    implementation 'ai.djl.pytorch:pytorch-engine'
//    runtimeOnly   'ai.djl.pytorch:pytorch-native-auto'
    runtimeOnly "ai.djl.pytorch:pytorch-native-cpu:1.13.1:osx-x86_64"

    // HuggingFace Zoo
    implementation 'ai.djl.huggingface:tokenizers'

    // JVector
    implementation 'io.github.jbellis:jvector:3.0.6'


    // Cardinal Components API
    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    include "org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    include "org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    // Keep vector-search shaded to avoid mod conflicts
    relocate 'io.github.jbellis.jvector', 'io.github.mysticism.libs.jvector'

    // DO NOT relocate DJL or SLF4J; relocating DJL breaks ServiceLoader providers
    // relocate 'ai.djl', 'io.github.mysticism.libs.djl'        // <-- removed
    // relocate 'org.slf4j', 'io.github.mysticism.libs.slf4j'   // <-- keep commented

    // Merge META-INF/services entries so ServiceLoader can discover providers
    mergeServiceFiles()

    archiveClassifier.set('')
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
    repositories { }
}
